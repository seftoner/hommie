import 'package:freezed_annotation/freezed_annotation.dart';
part 'types.freezed.dart';
part 'types.g.dart';

@freezed
class Context with _$Context {
  const factory Context(
      {required String id, String? user_id, String? parent_id}) = _Context;

  factory Context.fromJson(Map<String, dynamic> json) =>
      _$ContextFromJson(json);
}

sealed class HassEventBase {
  final String origin;
  final String timeFired;
  final Context context;

  HassEventBase(this.context, {required this.origin, required this.timeFired});
}

class HassEvent extends HassEventBase {
  final String eventType;
  final Map<String, dynamic> data;

  HassEvent(super.context, this.eventType, this.data,
      {required super.origin, required super.timeFired});
}

@freezed
class HassEntityAttributeBase with _$HassEntityAttributeBase {
  const factory HassEntityAttributeBase({
    String? friendly_name,
    String? unit_of_measurement,
    String? icon,
    String? entity_picture,
    num? supported_features,
    bool? hidden,
    bool? assumed_state,
    String? device_class,
    String? state_class,
    bool? restored,
  }) = _HassEntityAttributeBase;

  factory HassEntityAttributeBase.fromJson(Map<String, dynamic> json) =>
      _$HassEntityAttributeBaseFromJson(json);
}

typedef HassEntities = Map<String, HassEntity>;

abstract class HassEntityBasee {
  String get entity_id;
  String get state;
  String get lastChanged;
  String get lastUpdated;
  HassEntityAttributeBase get attributes;
  Context get context;
}

@freezed
sealed class HassEntity with _$HassEntity {
  const factory HassEntity({
    required String entity_id,
    required String state,
    required String last_changed,
    required String last_updated,
    required HassEntityAttributeBase attributes,
    required Context context,
  }) = _HassEntity;

  factory HassEntity.fromJson(Map<String, dynamic> json) =>
      _$HassEntityFromJson(json);
}

@freezed
class AreaEntity with _$AreaEntity {
  /// [area_id] - [AreaEntity] Unique ID of area (generated by Home Assistant)
  /// [name] - [AreaEntity] Name of this area
  /// [picture] - [AreaEntity] Picture of this area
  /// [aliases] - [AreaEntity] List of aliases for this area
  const factory AreaEntity(
      {required String area_id,
      required String name,
      String? picture,
      List<String>? aliases}) = _AreaEntity;

  factory AreaEntity.fromJson(Map<String, dynamic> json) =>
      _$AreaEntityFromJson(json);
}

@freezed
class AreaEntityList with _$AreaEntityList {
  const factory AreaEntityList(List<AreaEntity> areasList) = _AreaEntityList;

  factory AreaEntityList.fromJson(Map<String, dynamic> json) =>
      _$AreaEntityListFromJson(json);
}

@freezed
abstract class HassUser with _$HassUser {
  const factory HassUser({
    required String id,
    required bool is_admin,
    required bool is_owner,
    required String name,
  }) = _HassUser;

  factory HassUser.fromJson(Map<String, dynamic> json) =>
      _$HassUserFromJson(json);
}

@JsonEnum(valueField: 'state')
enum State {
  NOT_RUNNING("NOT_RUNNING"),
  STARTING("STARTING"),
  RUNNING("RUNNING"),
  STOPPING("STOPPING"),
  FINAL_WRITE("FINAL_WRITE"),
  ;

  const State(this.state);
  final String state;
}

@freezed
class HassConfig with _$HassConfig {
  const factory HassConfig({
    required double latitude,
    required double longitude,
    required double elevation,
    required UnitSystem unitSystem,
    required String locationName,
    required String timeZone,
    required List<String> components,
    required String configDir,
    required List<String> allowlistExternalDirs,
    required List<String> allowlistExternalUrls,
    required String version,
    required String configSource,
    required bool recoveryMode,
    required bool safeMode,
    // @StringEnum('NOT_RUNNING', 'STARTING', 'RUNNING', 'STOPPING', 'FINAL_WRITE')
    required State state,
    String? externalUrl,
    String? internalUrl,
    required String currency,
    String? country,
    required String language,
  }) = _HassConfig;

  factory HassConfig.fromJson(Map<String, dynamic> json) =>
      _$HassConfigFromJson(json);
}

@freezed
class UnitSystem with _$UnitSystem {
  const factory UnitSystem({
    required String length,
    required String mass,
    required String volume,
    required String temperature,
    required String pressure,
    required String windSpeed,
    required String accumulatedPrecipitation,
  }) = _UnitSystem;

  factory UnitSystem.fromJson(Map<String, dynamic> json) =>
      _$UnitSystemFromJson(json);
}

@freezed
class HassService with _$HassService {
  const factory HassService({
    String? name,
    required String description,
    Map<String, dynamic>? target,
    required Map<String, Field> fields,
    Response? response,
  }) = _HassService;
}

@freezed
class Field with _$Field {
  const factory Field({
    String? name,
    required String description,
    required dynamic example,
    Map<String, dynamic>? selector,
  }) = _Field;
}

@freezed
class Response with _$Response {
  const factory Response({
    required bool optional,
  }) = _Response;
}

typedef HassDomainServices = Map<String, HassService>;
typedef HassServices = Map<String, HassDomainServices>;
