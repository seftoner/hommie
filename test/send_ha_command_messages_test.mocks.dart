// Mocks generated by Mockito 5.4.4 from annotations
// in hommie/test/send_ha_command_messages_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hommie/services/networking/home_assitant_websocket/ha_connection_option.dart'
    as _i7;
import 'package:hommie/services/networking/home_assitant_websocket/ha_socket_state.dart'
    as _i5;
import 'package:hommie/services/networking/home_assitant_websocket/src/ha_messages.dart'
    as _i6;
import 'package:hommie/services/networking/home_assitant_websocket/src/ha_socket.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHASocket_0 extends _i1.SmartFake implements _i2.HASocket {
  _FakeHASocket_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HASocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockHASocket extends _i1.Mock implements _i2.HASocket {
  MockHASocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get haVersion => (super.noSuchMethod(
        Invocation.getter(#haVersion),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#haVersion),
        ),
      ) as String);

  @override
  set haVersion(String? _haVersion) => super.noSuchMethod(
        Invocation.setter(
          #haVersion,
          _haVersion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i5.HASocketState> get stateStream => (super.noSuchMethod(
        Invocation.getter(#stateStream),
        returnValue: _i4.Stream<_i5.HASocketState>.empty(),
      ) as _i4.Stream<_i5.HASocketState>);

  @override
  _i5.HASocketState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.dummyValue<_i5.HASocketState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.HASocketState);

  @override
  _i4.Stream<dynamic> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get isAuthInvalid => (super.noSuchMethod(
        Invocation.getter(#isAuthInvalid),
        returnValue: false,
      ) as bool);

  @override
  void sendMessage(_i6.HABaseMessgae? message) => super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HAConnectionOption].
///
/// See the documentation for Mockito's code generation for more information.
class MockHAConnectionOption extends _i1.Mock
    implements _i7.HAConnectionOption {
  MockHAConnectionOption() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.HASocket> createSocket() => (super.noSuchMethod(
        Invocation.method(
          #createSocket,
          [],
        ),
        returnValue: _i4.Future<_i2.HASocket>.value(_FakeHASocket_0(
          this,
          Invocation.method(
            #createSocket,
            [],
          ),
        )),
      ) as _i4.Future<_i2.HASocket>);
}
